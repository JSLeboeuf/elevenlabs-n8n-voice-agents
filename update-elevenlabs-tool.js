/**
 * Met √† jour le tool ElevenLabs avec la bonne URL du webhook n8n
 */

const axios = require('axios');

// Configuration
const ELEVENLABS_API_KEY = process.env.ELEVENLABS_API_KEY || '[YOUR_API_KEY_HERE]';
const TOOL_ID = 'tool_5101k1w8h1p2eprvsbeeqctbr94w';
const WEBHOOK_URL = 'https://autoscaleai2001.app.n8n.cloud/webhook/appointment-webhook';

async function updateTool() {
  const url = `https://api.elevenlabs.io/v1/convai/conversation/update_tool/${TOOL_ID}`;
  
  const toolConfig = {
    description: "Gestionnaire de rendez-vous - v√©rifie les disponibilit√©s et r√©serve des cr√©neaux",
    webhook: {
      url: WEBHOOK_URL,
      method: "POST",
      headers: {
        "Content-Type": "application/json"
      }
    },
    schema: {
      type: "object",
      properties: {
        tool: {
          type: "string",
          enum: ["check", "book"],
          description: "Action √† effectuer: check pour v√©rifier les disponibilit√©s, book pour r√©server"
        },
        name: {
          type: "string",
          description: "Nom complet du client"
        },
        email: {
          type: "string",
          description: "Email du client"
        },
        startTime: {
          type: "string",
          description: "Date et heure souhait√©es (ex: 'demain 14h', '2024-01-15 10:00')"
        }
      },
      required: ["tool", "name"]
    }
  };

  try {
    console.log('üîß Mise √† jour du tool ElevenLabs...');
    console.log(`   Tool ID: ${TOOL_ID}`);
    console.log(`   Webhook URL: ${WEBHOOK_URL}`);
    
    const response = await axios.patch(url, toolConfig, {
      headers: {
        'xi-api-key': ELEVENLABS_API_KEY,
        'Content-Type': 'application/json'
      }
    });

    console.log('\n‚úÖ Tool mis √† jour avec succ√®s!');
    console.log(JSON.stringify(response.data, null, 2));
    
    return response.data;
  } catch (error) {
    console.error('\n‚ùå Erreur lors de la mise √† jour du tool:');
    console.error(error.response?.data || error.message);
    
    // Si le tool n'existe pas, essayer de le cr√©er
    if (error.response?.status === 404) {
      console.log('\nüîÑ Le tool n\'existe pas, tentative de cr√©ation...');
      return createNewTool();
    }
  }
}

async function createNewTool() {
  const url = 'https://api.elevenlabs.io/v1/convai/conversation/create_tool';
  
  const toolConfig = {
    name: 'appointment_manager',
    description: "Gestionnaire de rendez-vous - v√©rifie les disponibilit√©s et r√©serve des cr√©neaux",
    webhook: {
      url: WEBHOOK_URL,
      method: "POST",
      headers: {
        "Content-Type": "application/json"
      }
    },
    schema: {
      type: "object",
      properties: {
        tool: {
          type: "string",
          enum: ["check", "book"],
          description: "Action √† effectuer: check pour v√©rifier les disponibilit√©s, book pour r√©server"
        },
        name: {
          type: "string",
          description: "Nom complet du client"
        },
        email: {
          type: "string",
          description: "Email du client"
        },
        startTime: {
          type: "string",
          description: "Date et heure souhait√©es (ex: 'demain 14h', '2024-01-15 10:00')"
        }
      },
      required: ["tool", "name"]
    }
  };

  try {
    const response = await axios.post(url, toolConfig, {
      headers: {
        'xi-api-key': ELEVENLABS_API_KEY,
        'Content-Type': 'application/json'
      }
    });

    console.log('\n‚úÖ Nouveau tool cr√©√© avec succ√®s!');
    console.log(`   Tool ID: ${response.data.tool_id}`);
    console.log('\n‚ö†Ô∏è  IMPORTANT: Mettez √† jour l\'agent avec ce nouveau tool ID');
    
    return response.data;
  } catch (error) {
    console.error('\n‚ùå Erreur lors de la cr√©ation du tool:');
    console.error(error.response?.data || error.message);
  }
}

// Ex√©cuter la mise √† jour
updateTool().catch(console.error);