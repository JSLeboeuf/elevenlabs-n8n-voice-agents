#!/usr/bin/env python3
"""
Script pour importer un workflow n8n via l'API
Nettoie automatiquement le JSON et g√®re les erreurs
"""

import json
import os
import requests
import sys
from typing import Dict, Any

# Configuration
N8N_API_KEY = os.environ.get('N8N_API_KEY', '[YOUR_N8N_API_KEY]')
N8N_BASE_URL = "https://autoscaleai2001.app.n8n.cloud"
WORKFLOW_FILE = "workflows/appointment-booking-system.json"

def clean_workflow_for_import(workflow: Dict[str, Any]) -> Dict[str, Any]:
    """
    Nettoie le workflow pour l'import en gardant seulement les champs requis
    """
    # Champs autoris√©s pour la cr√©ation
    allowed_fields = ['name', 'nodes', 'connections', 'settings']
    
    # Cr√©er un nouveau dict avec seulement les champs autoris√©s
    cleaned = {}
    for field in allowed_fields:
        if field in workflow:
            cleaned[field] = workflow[field]
    
    # S'assurer que settings existe
    if 'settings' not in cleaned:
        cleaned['settings'] = {"executionOrder": "v1"}
    
    # S'assurer que le nom est unique
    if 'name' in cleaned:
        import datetime
        timestamp = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
        cleaned['name'] = f"{cleaned['name']} - {timestamp}"
    
    return cleaned

def import_workflow(workflow_data: Dict[str, Any]) -> Dict[str, Any]:
    """
    Importe le workflow via l'API n8n
    """
    headers = {
        "X-N8N-API-KEY": N8N_API_KEY,
        "Content-Type": "application/json"
    }
    
    url = f"{N8N_BASE_URL}/api/v1/workflows"
    
    print(f"üì§ Envoi du workflow √†: {url}")
    print(f"üìã Nom du workflow: {workflow_data.get('name', 'Sans nom')}")
    
    try:
        response = requests.post(url, json=workflow_data, headers=headers)
        
        print(f"üìä Status Code: {response.status_code}")
        
        if response.status_code == 200 or response.status_code == 201:
            result = response.json()
            print(f"‚úÖ Workflow cr√©√© avec succ√®s!")
            print(f"üÜî ID: {result.get('id', 'ID non trouv√©')}")
            return result
        else:
            print(f"‚ùå Erreur: {response.status_code}")
            print(f"üìù R√©ponse: {response.text}")
            
            # Analyser l'erreur et proposer des solutions
            if "additional properties" in response.text:
                print("\nüí° Solution: Le workflow contient des propri√©t√©s non autoris√©es.")
                print("   Je vais r√©essayer avec un nettoyage plus strict...")
                
                # Nettoyage plus strict
                minimal_workflow = {
                    "name": workflow_data.get("name", "Appointment Booking System"),
                    "nodes": workflow_data.get("nodes", []),
                    "connections": workflow_data.get("connections", {}),
                    "settings": {"executionOrder": "v1"}
                }
                
                print("\nüîÑ Nouvelle tentative avec workflow minimal...")
                response2 = requests.post(url, json=minimal_workflow, headers=headers)
                
                if response2.status_code in [200, 201]:
                    result = response2.json()
                    print(f"‚úÖ Workflow cr√©√© avec succ√®s apr√®s nettoyage!")
                    print(f"üÜî ID: {result.get('id', 'ID non trouv√©')}")
                    return result
                else:
                    print(f"‚ùå √âchec m√™me apr√®s nettoyage: {response2.text}")
                    
            return None
            
    except Exception as e:
        print(f"‚ùå Erreur lors de l'import: {str(e)}")
        return None

def activate_workflow(workflow_id: str) -> bool:
    """
    Active le workflow apr√®s cr√©ation
    """
    headers = {
        "X-N8N-API-KEY": N8N_API_KEY,
        "Content-Type": "application/json"
    }
    
    # Essayer d'abord avec PATCH sur le workflow
    url = f"{N8N_BASE_URL}/api/v1/workflows/{workflow_id}"
    
    print(f"\nüîÑ Activation du workflow {workflow_id}...")
    
    try:
        # M√©thode 1: PATCH avec active: true
        response = requests.patch(url, json={"active": True}, headers=headers)
        
        if response.status_code == 200:
            print("‚úÖ Workflow activ√© avec succ√®s!")
            return True
        else:
            print(f"‚ö†Ô∏è  M√©thode 1 √©chou√©e: {response.status_code}")
            
            # M√©thode 2: Endpoint sp√©cifique /activate si disponible
            activate_url = f"{url}/activate"
            response2 = requests.post(activate_url, headers=headers)
            
            if response2.status_code == 200:
                print("‚úÖ Workflow activ√© avec succ√®s (m√©thode 2)!")
                return True
            else:
                print(f"‚ùå Impossible d'activer le workflow: {response2.text}")
                return False
                
    except Exception as e:
        print(f"‚ùå Erreur lors de l'activation: {str(e)}")
        return False

def main():
    """
    Fonction principale
    """
    print("üêô IMPORT DE WORKFLOW N8N")
    print("=" * 50)
    
    # Charger le workflow
    try:
        with open(WORKFLOW_FILE, 'r') as f:
            workflow = json.load(f)
        print(f"‚úÖ Workflow charg√© depuis {WORKFLOW_FILE}")
    except FileNotFoundError:
        print(f"‚ùå Fichier non trouv√©: {WORKFLOW_FILE}")
        sys.exit(1)
    except json.JSONDecodeError:
        print(f"‚ùå Erreur de parsing JSON dans {WORKFLOW_FILE}")
        sys.exit(1)
    
    # Nettoyer le workflow
    cleaned_workflow = clean_workflow_for_import(workflow)
    print(f"üßπ Workflow nettoy√© - {len(cleaned_workflow)} champs conserv√©s")
    
    # Importer le workflow
    result = import_workflow(cleaned_workflow)
    
    if result and 'id' in result:
        workflow_id = result['id']
        print(f"\nüìä D√©tails du workflow cr√©√©:")
        print(f"   - ID: {workflow_id}")
        print(f"   - Nom: {result.get('name', 'N/A')}")
        print(f"   - Actif: {result.get('active', False)}")
        
        # Activer le workflow
        if not result.get('active', False):
            activate_workflow(workflow_id)
        
        # URL du webhook
        webhook_path = None
        for node in result.get('nodes', []):
            if node.get('type') == 'n8n-nodes-base.webhook':
                webhook_path = node.get('parameters', {}).get('path', '')
                break
        
        if webhook_path:
            webhook_url = f"{N8N_BASE_URL}/webhook/{webhook_path}"
            print(f"\nüîó URL du Webhook: {webhook_url}")
        
        print(f"\n‚úÖ SUCC√àS! Le workflow est pr√™t √† utiliser.")
        print(f"üìù Pour voir le workflow: {N8N_BASE_URL}/workflow/{workflow_id}")
        
    else:
        print("\n‚ùå √âCHEC de l'import du workflow")
        print("üí° V√©rifiez que:")
        print("   1. L'API key est valide")
        print("   2. Le fichier workflow est correct")
        print("   3. L'instance n8n est accessible")

if __name__ == "__main__":
    main()